<?php
declare(strict_types=1);

namespace Externet\EpsBankTransfer;

use Externet\EpsBankTransfer\Utilities\Constants;
use SimpleXMLElement;

class BankConfirmationDetails
{

    /** @var SimpleXMLElement */
    public $simpleXml;

    private $remittanceIdentifier;
    private $paymentReferenceIdentifier;
    private $referenceIdentifier;
    private $orderingCustomerNameAddress;
    private $orderingCustomerIdentifier;
    private $orderingCustomerBIC;
    private $sessionId;
    private $statusCode;

    public function __construct($simpleXml)
    {
        $this->simpleXml = $simpleXml;
        $this->init($this->simpleXml);
    }

    /**
     * Initialize object from SimpleXMLElement
     * @param SimpleXMLElement $simpleXml
     */
    private function init(SimpleXMLElement $simpleXml)
    {
        $epspChildren = $simpleXml->children(Constants::XMLNS_epsp);
        $bankConfirmationDetails = $epspChildren[0];
        $t1 = $bankConfirmationDetails->children(Constants::XMLNS_eps); // Necessary because of missing language feature in PHP 5.3
        $paymentConfirmationDetails = $t1[0];
        $t2 = $paymentConfirmationDetails->children(Constants::XMLNS_epi);
        $this->remittanceIdentifier = null;

        $this->setPaymentReferenceIdentifier($paymentConfirmationDetails->PaymentReferenceIdentifier);
        $this->setSessionId($bankConfirmationDetails->SessionId);
        $this->setStatusCode($paymentConfirmationDetails->StatusCode);

        if (isset($t2->RemittanceIdentifier)) {
            $this->setRemittanceIdentifier($t2->RemittanceIdentifier);
        } elseif (isset($t2->UnstructuredRemittanceIdentifier)) {
            $this->setRemittanceIdentifier($t2->UnstructuredRemittanceIdentifier);
        } else {
            $t3 = $paymentConfirmationDetails->PaymentInitiatorDetails->children(Constants::XMLNS_epi);
            $epiDetails = $t3[0];
            $t4 = $epiDetails->PaymentInstructionDetails;
            if (isset($t4->RemittanceIdentifier)) {
                $this->setRemittanceIdentifier($t4->RemittanceIdentifier);
            } else {
                $this->setRemittanceIdentifier($t4->UnstructuredRemittanceIdentifier);
            }

            // ReferenceIdentifier used in TransferInitiatorDetails as internal reference ID
            $t5 = $epiDetails->IdentificationDetails;
            $this->setReferenceIdentifier($t5->ReferenceIdentifier);

            // The following 3 data elements could be used e.g. for routing information within additional business scenarios (e.g. EBPP)
            // These are optional data elements
            if (isset($t5->OrderingCustomerNameAddressText)) {
                $this->setOrderingCustomerNameAddressText($t5->OrderingCustomerNameAddressText);
            }

            if (isset($t5->OrderingCustomerIdentifier)) {
                $this->setOrderingCustomerIdentifier($t5->OrderingCustomerIdentifier);
            }

            if (isset($t5->OrderingCustomerOfiIdentifier)) {
                $this->setOrderingCustomerBIC($t5->OrderingCustomerOfiIdentifier);
            }
        }

        if ($this->remittanceIdentifier == null)
            throw new \LogicException('Could not find RemittanceIdentifier in XML');
    }

    public function setRemittanceIdentifier($a)
    {
        $this->remittanceIdentifier = (string)$a;
    }

    /**
     * Gets epi:RemittanceIdentifier or epi:UnstructuredRemittanceIdentifier - depending on which one is present in the XML file
     */
    public function getRemittanceIdentifier()
    {
        return $this->remittanceIdentifier;
    }

    public function setPaymentReferenceIdentifier($a)
    {
        $this->paymentReferenceIdentifier = (string)$a;
    }

    /**
     * Get payment reference identifier generated by the bank
     * @return string
     */
    public function getPaymentReferenceIdentifier(): string
    {
        return $this->paymentReferenceIdentifier;
    }


    public function setReferenceIdentifier($a)
    {
        $this->referenceIdentifier = (string)$a;
    }

    public function getReferenceIdentifier()
    {
        return $this->referenceIdentifier;
    }

    /**
     * Set the identification of ordering customer (name and/or address of the buyer) in non-coded form
     * @param $customerName
     */
    public function setOrderingCustomerNameAddressText($customerName)
    {
        $this->orderingCustomerNameAddress = (string)$customerName;
    }

    /**
     * Get the identification of ordering customer (name and/or address of the buyer) in non-coded form
     * @return mixed
     */
    public function getOrderingCustomerNameAddress()
    {
        return $this->orderingCustomerNameAddress;
    }


    /**
     * Set the identification of the customer's (buyer's) account identification by e.g. IBAN, BBAN, etc.
     * @param $iban
     */
    public function setOrderingCustomerIdentifier($iban)
    {
        $this->orderingCustomerIdentifier = (string)$iban;
    }

    /**
     * Get the identification of the customer's (buyer's) account identification by e.g. IBAN, BBAN, etc.
     * @return mixed
     */
    public function getOrderingCustomerIdentifier()
    {
        return $this->orderingCustomerIdentifier;
    }


    /**
     * Set the identification of the customer's (buyer's) financial institution by a BIC
     * @param $bic
     */
    public function setOrderingCustomerBIC($bic)
    {
        $this->orderingCustomerBIC = (string)$bic;
    }

    /**
     * Get the identification of the customer's (buyer's) financial institution by a BIC
     * @return mixed
     */
    public function getOrderingCustomerBIC()
    {
        return $this->orderingCustomerBIC;
    }

    public function setSessionId($a)
    {
        $this->sessionId = (string)$a;
    }

    /**
     * Get session ID generated by the bank
     * @return string
     */
    public function getSessionId(): string
    {
        return $this->sessionId;
    }

    public function setStatusCode($a)
    {
        $this->statusCode = (string)$a;
    }

    /**
     * Get status code
     * @return string
     */
    public function getStatusCode(): string
    {
        return $this->statusCode;
    }
}