<?php
declare(strict_types=1);

namespace Externet\EpsBankTransfer\Domain;

use Externet\EpsBankTransfer\Utilities\Constants;
use SimpleXMLElement;

class BankConfirmationDetails
{
    /** @var SimpleXMLElement */
    public $simpleXml;

    private $remittanceIdentifier;
    private $paymentReferenceIdentifier;
    private $referenceIdentifier;
    private $orderingCustomerNameAddress;
    private $orderingCustomerIdentifier;
    private $orderingCustomerBIC;
    private $sessionId;
    private $statusCode;

    public function __construct($simpleXml)
    {
        $this->simpleXml = $simpleXml;
        $this->init($this->simpleXml);
    }

    private function init(SimpleXMLElement $simpleXml)
    {
        $bankConfirmationDetails = $simpleXml->children(Constants::XMLNS_epsp)[0];
        $paymentConfirmationDetails = $bankConfirmationDetails->children(Constants::XMLNS_eps)[0];
        $epiChildren = $paymentConfirmationDetails->children(Constants::XMLNS_epi);

        $this->setPaymentReferenceIdentifier($paymentConfirmationDetails->PaymentReferenceIdentifier);
        $this->setSessionId($bankConfirmationDetails->SessionId);
        $this->setStatusCode($paymentConfirmationDetails->StatusCode);

        if (isset($epiChildren->RemittanceIdentifier)) {
            $this->setRemittanceIdentifier($epiChildren->RemittanceIdentifier);
            return;
        }

        if (isset($epiChildren->UnstructuredRemittanceIdentifier)) {
            $this->setRemittanceIdentifier($epiChildren->UnstructuredRemittanceIdentifier);
            return;
        }

        $epiDetails = $paymentConfirmationDetails->PaymentInitiatorDetails->children(Constants::XMLNS_epi)[0];
        $paymentDetails = $epiDetails->PaymentInstructionDetails;
        $identificationDetails = $epiDetails->IdentificationDetails;

        $this->setRemittanceIdentifier(
            $paymentDetails->RemittanceIdentifier ?? $paymentDetails->UnstructuredRemittanceIdentifier
        );

        $this->setReferenceIdentifier($identificationDetails->ReferenceIdentifier);

        if (isset($identificationDetails->OrderingCustomerNameAddressText)) {
            $this->setOrderingCustomerNameAddressText($identificationDetails->OrderingCustomerNameAddressText);
        }

        if (isset($identificationDetails->OrderingCustomerIdentifier)) {
            $this->setOrderingCustomerIdentifier($identificationDetails->OrderingCustomerIdentifier);
        }

        if (isset($identificationDetails->OrderingCustomerOfiIdentifier)) {
            $this->setOrderingCustomerBIC($identificationDetails->OrderingCustomerOfiIdentifier);
        }

        if ($this->remittanceIdentifier === null) {
            throw new \LogicException('Could not find RemittanceIdentifier in XML');
        }
    }

    public function setRemittanceIdentifier($a)
    {
        $this->remittanceIdentifier = (string)$a;
    }

    /**
     * Gets epi:RemittanceIdentifier or epi:UnstructuredRemittanceIdentifier - depending on which one is present in the XML file
     */
    public function getRemittanceIdentifier()
    {
        return $this->remittanceIdentifier;
    }

    public function setPaymentReferenceIdentifier($a)
    {
        $this->paymentReferenceIdentifier = (string)$a;
    }

    /**
     * Get payment reference identifier generated by the bank
     * @return string
     */
    public function getPaymentReferenceIdentifier(): string
    {
        return $this->paymentReferenceIdentifier;
    }


    public function setReferenceIdentifier($a)
    {
        $this->referenceIdentifier = (string)$a;
    }

    public function getReferenceIdentifier()
    {
        return $this->referenceIdentifier;
    }

    /**
     * Set the identification of ordering customer (name and/or address of the buyer) in non-coded form
     * @param $customerName
     */
    public function setOrderingCustomerNameAddressText($customerName)
    {
        $this->orderingCustomerNameAddress = (string)$customerName;
    }

    /**
     * Get the identification of ordering customer (name and/or address of the buyer) in non-coded form
     * @return mixed
     */
    public function getOrderingCustomerNameAddress()
    {
        return $this->orderingCustomerNameAddress;
    }


    /**
     * Set the identification of the customer's (buyer's) account identification by e.g. IBAN, BBAN, etc.
     * @param $iban
     */
    public function setOrderingCustomerIdentifier($iban)
    {
        $this->orderingCustomerIdentifier = (string)$iban;
    }

    /**
     * Get the identification of the customer's (buyer's) account identification by e.g. IBAN, BBAN, etc.
     * @return mixed
     */
    public function getOrderingCustomerIdentifier()
    {
        return $this->orderingCustomerIdentifier;
    }


    /**
     * Set the identification of the customer's (buyer's) financial institution by a BIC
     * @param $bic
     */
    public function setOrderingCustomerBIC($bic)
    {
        $this->orderingCustomerBIC = (string)$bic;
    }

    /**
     * Get the identification of the customer's (buyer's) financial institution by a BIC
     * @return mixed
     */
    public function getOrderingCustomerBIC()
    {
        return $this->orderingCustomerBIC;
    }

    public function setSessionId($a)
    {
        $this->sessionId = (string)$a;
    }

    /**
     * Get session ID generated by the bank
     * @return string
     */
    public function getSessionId(): string
    {
        return $this->sessionId;
    }

    public function setStatusCode($a)
    {
        $this->statusCode = (string)$a;
    }

    /**
     * Get status code
     * @return string
     */
    public function getStatusCode(): string
    {
        return $this->statusCode;
    }
}